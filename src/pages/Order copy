import styled from 'styled-components';
import { colors } from '../config';
import Heading from '../elements/Heading';

import FIRST from '../assets/illustrations/first.png'
import { decimalToMoney, formatTimeWithExtension, formatTwoTimesWithExtension } from '../services/functions';
import Icon from '../elements/Icon';
import Button from '../elements/Button';
import { useApi, useSelector } from '../contexts/main';
import Header from '../components/Header';
import { useOrdersDispatch } from '../contexts/orders';
import { useEffect, useRef, useState } from 'react';
import Print, { printRef } from '../components/Print';
import { useAlert } from '../hooks/alert';

const Container = styled.div`

    display: flex;
    flex-direction: column;
    align-items: center;

    .select {
        background-color: ${colors.background_third};
        overflow: hidden;
        align-items: center;
        margin-top: 25px;
        border-radius: 10px;
        font-size: 1rem;
        max-width: 400px;
        width: 100%;
        display: flex; 
        cursor: pointer;
      

        .left{
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
            background-color: ${colors.success};
            color: ${colors.background};
            padding: 10px;
            text-align: center;
            font-family: Whitney Bold;
            transition: 200ms;
            height: 50px;

            &:hover{
                opacity: 0.5;
            }
        }
        .right{
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: ${colors.error};
            color: ${colors.background};
            padding: 10px;
            text-align: center;
            font-family: Whitney Bold;
            transition: 200ms;
            height: 50px;
            &:hover{
                opacity: 0.5;
            }
        }
    }

    .box {
        background-color: ${colors.background_third};
        padding: 10px;
        align-items: center;
        margin-top: 10px;
        border-radius: 10px;
        font-size: 1rem;
        max-width: 400px;
        width: 100%;
        display: flex; 

        img {
            width: 40px;
            height: 40px;
        }

        .title{
            font-family: Whitney Bold;
            padding: 0px 10px;
        }
    }

    .division {
        width: 100%;
        height: 1px;
        background-color: ${colors.background_secondary};
        margin: 20px 0;
    }
`;

const Details = styled.div`

    width: 100%;
    display: flex;

    > .left {

        padding-left: 20px;

        .picture {
            width: 50px;
            height: 50px;
            background-color: ${colors.background_secondary};
            border-radius: 25px;
        }
    }

    > .right {
        padding: 0px 20px;
        width: 100%;

        > .chatbox{

            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 10px;
            position: relative;
            margin-top: 10px;

            &.first:after {
                width: 20px;
                height: 20px;
                background-color: #f5f5f5;
                content: "";
                position: absolute;
                top: 15px;
                left: -7px;
                border-radius: 5px;
                transform: rotate(45deg);
                display: block;
            }

            > .item {
        
                padding: 10px;
                width: 100%;
                
                &:not(:first-child){
                    border-top: 1px solid ${colors.background_secondary};
                }
                //::afterbox-shadow: 2px 2px 10px #0001;
              
                display: flex;
              

                .qty {
                    font-family: Whitney Bold;
                    padding-right: 10px;
                    color: ${colors.subtitle};
                }
                .name {
                    font-family: Whitney Bold;
                    flex: 1;
                }
                .price {
                    font-family: Whitney Bold;
                    padding-left: 10px;
                    color: ${colors.subtitle};
                }

                position: relative;


            }

            > .total {
                padding: 10px;
                //::afterbox-shadow: 2px 2px 10px #0001;
                display: flex;

            
                .name {
                    font-family: Whitney Bold;
                    font-size: 1.25rem;
                }
                .price {
                    font-family: Whitney Bold;
                    padding-left: 10px;
                    color: ${colors.subtitle};
                    font-size: 1.25rem;
                }


            }

        }

        

       
    }
`

const orderStatus:any = {
    "PDG": "Pendente",
    "CFM": "Pendente, Preparando",
    "DSP": "Pendente, Preparando, Entregando",
    "CON": "Completo",
    "RTP": "Pendente, Preparando, Aguarando cliente",
    "CAN": "Cancelado",
}


const nextStep = (order:any) => {

    const {status,type} = order

    if(status === "PDG")
        return "CFM"

    else if(status === "CFM" && type === "DELIVERY")
        return "DSP"

    else if(status === "CFM" && type === "PICKUP" ) 
        return "RTP"

    else if(status === "CFM" && type === "INDOOR") 
        return"DSP"

    else if((status === "DSP" || status === "RTP"))
        return "CON"

    else 
        return ""
}

const OrderPage = ({data}:any) => {


    const api = useApi();
    const {updateOrder,removeOrder}:any = useOrdersDispatch()
    const [loading,setLoading] = useState(false);
    const [print,setPrint] = useState(false);
    const refPrint = useRef<printRef>(null);
    const alert = useAlert();
    const merchant = useSelector(state => state.merchant)
    
    const [order,setOrder] = useState<any>();

    const handlerGetDetrails = async () => {
        setLoading(true);
        const res:any = await api.get("/orders/"+data.id);
        setOrder(res.data)
        setLoading(false);
    }

    useEffect(() => {
        handlerGetDetrails();
    },[data.id])

    
    const handleNextStep = async () => {
        if(loading)
            return;

        setLoading(true);
        alert.open("WARNING",{
            message: "Atualizando pedido..."
        })
        const res:any = await api.put("/orders/"+data.id+"/status/"+nextStep(order));
        alert.open("SUCCESS",{
            message: "Pedido atualizado com sucesso!"
        })
        setLoading(false);
        updateOrder(res.data)
        setOrder({...order,...res.data});
    }

    const handlerAccept = async () => {
        if(loading)
            return;

        setLoading(true);
        alert.open("WARNING",{
            message: "Atualizando pedido..."
        })
       const res:any = await api.put("/orders/"+data.id+"/nextstep");
       alert.open("SUCCESS",{
            message: "Pedido atualizado com sucesso!"
        })
        setLoading(false);
        updateOrder(res.data)
    }

    const handlerReject = async () => {
        if(loading)
            return;

        setLoading(true);
        alert.open("WARNING",{
            message: "Atualizando pedido..."
        })
        const res:any = await api.put("/orders/"+data.id+"/reject");
        alert.open("SUCCESS",{
            message: "Pedido atualizado com sucesso!"
        })
        setLoading(false);
        updateOrder(res.data)
     }

     const handlerCancel = async () => {
        if(loading)
            return;

        setLoading(true);
        alert.open("WARNING",{
            message: "Atualizando pedido..."
        })
        const res:any = await api.put("/orders/"+data.id+"/cancel");
        alert.open("SUCCESS",{
            message: "Pedido atualizado com sucesso!"
        })
        setLoading(false);
        updateOrder(res.data)
     }
    
    const handlerPrint = async () => {
        refPrint.current?.open(<div>
            <Heading title={`Pedido #${data.ref.toString()}`} bold align="center" size={6}/>
            <Heading title={`Realizado ${formatTimeWithExtension(data.orderedDateTime)}`} align="center" size={6}/>
            <Heading title={`Entrega Prevista para ${formatTwoTimesWithExtension(data.estimatedMinDateTime,data.estimatedMaxDateTime)}`} align="center" size={6}/>
            <div className="separator"/>
            <Heading title={`Pedido: ${orderStatus[data.status]}`} align="center" size={6}/>
            <div className="separator"/>
            <Heading title={`Cliente ${data.custumer.name}, telefone: ${data.custumer.phone}`} align="center" size={6}/>
            <div className="separator"/>
            <Heading title={`EndereÃ§o de entrega`} bold align="center" size={6}/>
            <Heading title={data.custumer.address} align="center" size={6}/>
            <div className="separator"/>
            <Heading title={`Produtos / itens`} bold align="center" size={6}/>
            {
                data.items.map((item:any) => (
                    <div className="item">
                        <div className="qty">{item.qty}x</div>
                        <div className="name">{item.name}</div>
                        <div className="price">{decimalToMoney(item.price)}</div>
                    </div>
                ))
            }
            <div className="separator"/>

            <div className="total">
                <div className="title">(+) Subtotal</div>
                <div className="price">{decimalToMoney(data.subtotal)}</div>
            </div>
            <div className="total">
                <div className="title">(+) Taxa de entrega</div>
                <div className="price">{decimalToMoney(data.totalFee)}</div>
            </div>
            <div className="total">
                <div className="title">(-) Desconto</div>
                <div className="price">{decimalToMoney(data.discount)}</div>
            </div>
            <div className="total">
                <div className="title">(-) Desconto do restaurante</div>
                <div className="price">{decimalToMoney(data.customDiscount)}</div>
            </div>
            <div className="total">
                <div className="title">(=) Total</div>
                <div className="price">{decimalToMoney(data.total)}</div>
            </div>
            <div className="separator"/>
            <Heading title={`Forma de pagamento`} bold align="center" size={6}/>
            <Heading title={data.payment} align="center" size={6}/>
            <div className="separator"/>
            <Heading title={`ObservaÃ§Ãµes`} bold align="center" size={6}/>
            <Heading title={`Incluir CPF na nota ${data.custumer.fiscal}`} align="center" size={6}/>
        </div>)
    }

    const cards:any = {
        "PDG": <div>
            <Heading title={`Confirme para ver mais detalhes do cliente`} bold align="center" size={3} color={colors.error}/>
            <Heading title={`Os dados do cliente ficam visiveis apenas apÃ³s o pedido ser confirmado.`} align="center" size={4} color={colors.subtitle}/>
            <div style={{display: 'flex',justifyContent: 'center'}}>
                <div className="select" style={{opacity: loading ? 0.5 : 1}}>
                    
                    <div className="left" onClick={handlerAccept}>
                        ACEITAR
                    </div>
                    <div className="right" onClick={handlerReject}>
                        RECUSAR
                    </div>
                    
                </div>
            </div>

        </div>,
        "CFM": <div>
            <Heading title={`Pedido em preparaÃ§Ã£o`} bold align="center" size={3} color={colors.warning}/>
        </div>,
        "DSP": <div>
            <Heading title={`Entregando pedido`} bold align="center" size={3} color={colors.success}/>
        </div>
         ,"RTP": <div>
         <Heading title={`Aguardando cliente`} bold align="center" size={3} color={colors.success}/>
     </div>
    }   

    if(data.status === "CAN")   
        return <Container>
             <Heading title={`Pedido #${data.ref.toString()}`} bold align="center" size={1}/>
             <Heading title={`Pedido cancelado`} bold align="center" size={3} color={colors.error}/>
        </Container> 

    // else if(data.status === "CAN")   
    //     return <Container>
    //         <Heading title={`Pedido #${data.ref.toString()}`} bold align="center" size={1}/>
    //         <Heading title={`Pedido cancelado`} bold align="center" size={3} color={colors.error}/>
    //     </Container> 
    else if(data.status === "CON")   
        return <Container>
            <Heading title={`Pedido #${data.ref.toString()}`} bold align="center" size={1}/>
            <Heading title={`Pedido concluÃ­do`} bold align="center" size={3} color={colors.success}/>
        </Container> 

    if(!data)
        return <></>

  return <Container>
  
    <Print ref={refPrint}/>

    <Heading title={`Pedido #${data.ref.toString()}`} bold align="center" size={1}/>
    {cards[data.status]}
  
    {loading && <>Carregando...</>}

  { order && <>

    <div style={{height: 20}}/>

        <div className="box">
            <div className="icon">
                <Icon name="date" size={32} color={colors.logo_color}/>
            </div>
            <div className="title">
                <Heading title={`Pedido feito ${formatTimeWithExtension(order.orderedDateTime)}`} bold size={6}/>
                <Heading title={`Entrega Prevista para ${formatTimeWithExtension(order.estimatedMinDateTime)}`} bold size={4}/>           
            </div>
            <div className="right"></div>
        </div>

    <div className="box">
        <div className="icon">
            <Icon name="account_info" size={32} color={colors.logo_color}/>
        </div>
        <div className="title">
            <Heading title={`NOVO CLIENTE`} bold size={6} color={colors.subtitle}/>
            <Heading title={`Primeiro pedido feito na sua loja`} bold size={4}/>
        </div>
        <div className="right"></div>
    </div>

    <div className="box">
        <div className="icon">
            <Icon name="map" size={32} color={colors.logo_color}/>
        </div>
        <div className="title">
            <Heading title={`DELIVERY`} bold size={6} color={colors.subtitle}/>
            <Heading title={`Entregar em ${order.custumer && order.custumer.address}`} bold size={4}/>
        </div>
        <div className="right"></div>
    </div>

    <div className="division"/>

    <Details>
        <div className="left">
            <div className="picture"/>
        </div>
        <div className="right">
            { !!order.custumer && <>{ order.status !== "PDG"
            ? <Heading title={order.custumer.name || order.custumer.phone} bold size={4}/>
            : <Heading title={"Cliente anÃ´nimo â¢ Aceite para vizualizar"} color={colors.error} bold size={4}/>
            }</> }

            <div className="chatbox first">
            {
                order.items.map((item:any) => (
                    <div className="item">
                        <div className="qty">{item.qty}x</div>
                        <div className="name">{item.name}</div>
                        <div className="price">{decimalToMoney(item.price)}</div>
                    </div>
                ))
            }
            </div>

            <div className="chatbox">

                <div className="total">
                    <div className="name">Taxa de entrega</div>
                    <div className="price">{decimalToMoney(order.totalFee)}</div>
                </div>

                <div className="total">
                    <div className="name">Total</div>
                    <div className="price">{decimalToMoney(order.total)}</div>
                </div>

            </div>

            <div className="chatbox">

                <div className="total">
                    <div className="name">mÃ©todo de pagamento</div>
                    <div className="price">{order.paymentMethod}</div>
                </div>

            </div>

        </div>
    </Details>

    </> }

    {
        data.status !== "PDG" && <div style={{display: 'flex',padding: 10,justifyContent: 'flex-end',width: '100%'}}>
            <Button disable={loading} title="Cancelar" onPress={handlerCancel}/>
            <Button title="Imprimir" onPress={handlerPrint}/>
            <Button disable={loading} title="Proximo estado" onPress={handlerAccept}/>
        </div>
    } 

  


  </Container>

}

export default OrderPage;